import hashlib
from urllib.parse import urlparse
import time
import simplejson as json
from flask import Flask
import uuid


class BlockChain(object):

    """
    Construction
    """
    def __init__(self):
        self.current_transaction = []
        self.chain = []
        self.nodes = set()

        # Create the genesis block
        self.new_block(previous_hash='1', proof=100)


    @staticmethod
    def hash(block):
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()


    def register_node(self, address):
        """
        Add a new node to the list of nodes
        :param address: Address of node. Eg. 'http://192.168.0.5:5000'
        """

        parsed_url = urlparse(address)
        if parsed_url.netloc:
            self.nodes.add(parsed_url.netloc)
        elif parsed_url.path:
            # Accepts an URL without scheme like '192.168.0.5:5000'.
            self.nodes.add(parsed_url.path)
        else:
            raise ValueError('Invalid URL')



    def new_transaction(self, sender, recipient, amount):

        self.current_transaction.append({
            'sender' : sender,
            'recipient' : recipient,
            'amount' : amount

        })

        return self.last_block['index'] + 1



    def new_block(self, proof, previous_hash=None):
        """
        Create a new block
        :param proof: <int> generated by proof()
        :param previous_hash: (Optional) <str>
        :return: <dict> new block
        """

        block = {
            'index' : len(self.chain)+1,
            'timestamp' : time.ctime(),
            'transactions' : self.current_transaction,
            'proof' : proof,
            'previous_hash' : previous_hash or self.hash(self.chain[-1])

        }

        # 重置当前交易记录
        self.current_transactions = []
        self.chain.append(block)
        return block




    def proof_of_work(self, last_proof):
        pass


    @staticmethod
    def valid_proof(last_proof, proof):
        pass



app = Flask(__name__)

node_id = str(uuid.uuid4()).replace('-', '')

blockchain = BlockChain()


def mine()







if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5656)