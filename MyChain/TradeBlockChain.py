import hashlib
from urllib.parse import urlparse
import time
import simplejson as json
from flask import Flask
from flask import request
import uuid
import requests


class BlockChain(object):

    """
    Construction Method
    """
    def __init__(self):
        self.current_transaction = []
        self.chain = []
        self.nodes = set()
        self.landsAndOwner = {}
        # Create the genesis block
        self.new_block(previous_hash='1', proof=100, land_owner_info={})


    @staticmethod
    def hash(block):
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()


    def new_nodes(self, identifier):
        """
        Add a new node to the list of nodes
        :param identifier: Identifier of node. Eg. '1234567890'
        """

        if isinstance(identifier, int) and 10000 < identifier < 99999:

            self.nodes.add(identifier)

        else:
            raise ValueError('Invalid ID')



    def new_transaction(self, sender, recipient, land_id, amount):

        self.current_transaction.append({
            'sender' : sender,
            'recipient' : recipient,
            'land_id'   : land_id,
            'amount' : amount

        })

        return self.last_block['index'] + 1



    def new_block(self, proof, previous_hash=None, land_owner_info={}):
        """
        Create a new block
        :param proof: <int> generated by proof()
        :param previous_hash: (Optional) <str>
        :return: <dict> new block
        """

        block = {
            'index' : len(self.chain)+1,
            'timestamp' : time.ctime(),
            'transactions' : self.current_transaction,
            'proof' : proof,
            'previous_hash' : previous_hash or self.hash(self.chain[-1])

        }

        # 重置当前交易记录
        self.current_transactions = []
        self.chain.append(block)
        return block




    def proof_of_work(self, last_proof):


    @staticmethod
    def valid_proof(last_proof, proof):
        pass



app = Flask(__name__)

node_id = str(uuid.uuid4()).replace('-', '')

blockchain = BlockChain()


@app.route('/nodes/register', methods=['POST'])
def register_nodes():

    values = request.get_json()

    nodes = values.get('nodes')
    if nodes is None:
        return "Error: Please supply a valid list of nodes", 400

    for node in nodes:
        blockchain.new_nodes(node)

    response = {
        'message': 'New nodes have been added',
        'total_nodes': list(blockchain.nodes),
    }
    return json.dumps(response), 201



@app.route('/test')
def testonly():
    return "testonly"


if __name__ == '__main__':
    app.run(host='localhost', port=5656)

